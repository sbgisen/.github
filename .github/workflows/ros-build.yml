name: ros-build-from-scratch

on:
  workflow_call:
    secrets:
      ssh_key:
        required: true
      known_hosts:
        required: true
    inputs:
      package_name:
        default: ${{ github.event.repository.name }}
        required: false
        type: string
      install_libfreenect2:
        default: false
        required: false
        type: boolean
      run_test:
        default: false
        required: false
        type: boolean
      runs_on:
        default: ubuntu-latest
        required: false
        type: string
      setup_script:
        required: false
        type: string
      ignore_rosinstalls:
        default: ""
        required: false
        type: string
        description: "Specify relative paths from /path/to/workspace/src as in
          ./ros-package/.rosinstall, separated by commas."
      ros_distro:
        default: melodic
        required: false
        type: string

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs_on }}
    timeout-minutes: 60
    env:
      SPEAKER: true
    container:
      image: ros:${{ inputs.ros_distro }}
    steps:
      - name: Install necessary apt packages
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-client keyboard-configuration
        timeout-minutes: 1
      - name: setup ssh key
        uses: shimataro/ssh-key-action@3c9b0fc6f2d223b8450b02a0445f526350fc73e0 # v2.3.1
        with:
          key: ${{ secrets.ssh_key }}
          known_hosts: ${{ secrets.known_hosts }}
        timeout-minutes: 1
      - name: Update git version
        run: |
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          apt-get update
          apt-get install git -y
        shell: bash
      - name: Check out source repository
        uses: actions/checkout@v2
        with:
          path: ros/src/${{ github.event.repository.name }}
          submodules: recursive
        timeout-minutes: 1
      - name: Download repositories managed by vcstool
        run: |
          if !(type vcs > /dev/null 2>&1); then
              apt update && apt install -y python3-vcstool git
          fi

          not_contains() {
              [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] && exit 1 || exit 0
          }

          IFS=', ' read -ra ignore_files <<< "${{ inputs.ignore_rosinstalls }}"
          files=`find . -type f -regextype posix-egrep -regex "\./.+\.rosinstall" | sort`
          pre_n=0
          n=`echo ${files} | wc -w`
          while [ `comm -3 <(echo ${files}) <(echo ${ignore_files[@]} | sort) | wc -w` -ne 0 -a ${n} -ne ${pre_n} ]
          do
              for f in ${files}
              do
                  if `not_contains ${f} ${ignore_files}`; then
                      vcs import --recursive --debug < ${f}
                      ignore_files+=(${f})
                  fi
              done
              files=`find . -type f -regextype posix-egrep -regex "\./.+\.rosinstall" | sort`
              pre_n=${n}
              n=`echo ${files} | wc -w`
          done
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src
        timeout-minutes: 5
      - name: Install rosdep packages
        run: |
          rosdep update
          rosdep install -iry --from-paths . --rosdistro ${ROS_DISTRO}
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 15
      - name: ccache
        uses: hendrikmuhs/ccache-action@1ed7eb5b4b2afeceab143d0caa0d7fa87c33047b # v1.0.5
        with:
          max-size: 100M
        timeout-minutes: 1
      - name: Run setup script
        run: |
          if [ "${{ inputs.setup_script }}" != "" ]; then
            ./${{ inputs.setup_script }}
          fi
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src/${{ github.event.repository.name }}
        timeout-minutes: 30
      - name: Install libfreenect2
        if: inputs.install_libfreenect2
        run: |
          apt-get install -y build-essential cmake pkg-config libusb-1.0-0-dev \
                             libturbojpeg0-dev libglfw3-dev checkinstall
          if dpkg -l libfreenect2; then
            echo "Already installed"
          else
            git clone https://github.com/OpenKinect/libfreenect2.git
            cd libfreenect2
            mkdir build && cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
            make
            checkinstall -y --pkgname="libfreenect2"
          fi
        working-directory: ${{ github.workspace }}
        timeout-minutes: 3
      - name: Build ros packages
        run: |
          if [ `find src/${{ github.event.repository.name }} -name CMakeLists.txt | wc -l` -eq 0 ]; then
            exit 0
          fi
          if [ ${ROS_DISTRO} == melodic ]; then
            apt-get install -y python-catkin-tools
          else
            apt-get install -y python3-catkin-tools
          fi
          source /opt/ros/${ROS_DISTRO}/setup.bash
          export PATH="/usr/lib/ccache:$PATH"
          catkin init
          catkin config --extend /opt/ros/${ROS_DISTRO}
          catkin config --no-blacklist
          catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          catkin build -s --no-status ${{ inputs.package_name }}
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 30
      - name: Run test
        if: inputs.run_test
        run: |
          if [ `find src/${{ github.event.repository.name }} -name CMakeLists.txt | wc -l` -eq 0 ]; then
            exit 0
          fi
          source devel/setup.bash
          catkin run_tests -i --no-deps --no-status ${{ inputs.package_name }}
          catkin_test_results --verbose --all build || (trap - ERR && exit 1)
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 30
      - name: Generate documentations
        id: generate_documents
        run: |
          if [ ! -f "./docs/_sources/conf.py" ]; then
            exit 0
          fi
          if [ ${ROS_DISTRO} == melodic ]; then
            apt-get install -y python-pip
            pip2 install sphinx==1.8.6
            if [ -f "./docs/_sources/requirements.txt" ]; then
              pip2 install -r docs/_sources/requirements.txt
            fi
          else
            exit 0
          fi
          source ../../devel/setup.bash
          sphinx-apidoc -f -e -o docs/_sources src/${{ github.event.repository.name }}
          sphinx-build docs/_sources docs/
          echo "::set-output name=file_exists::$(find . -wholename ./docs/py-modindex.html | wc -l)"
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src/${{ github.event.repository.name }}
      - name: Publish documentations
        uses: peaceiris/actions-gh-pages@068dc23d9710f1ba62e86896f84735d869951305
        if: steps.generate_documents.outputs.file_exists == 1 && github.event.repository.default_branch == github.ref_name
        with:
          publish_branch: gh-pages
          github_token: ${{ github.token }}
          publish_dir: ros/src/${{ github.event.repository.name }}/docs
