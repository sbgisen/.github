name: ros2-build

on:
  workflow_call:
    secrets:
      ssh_key:
        required: true
      known_hosts:
        required: true
    inputs:
      package_name:
        default: ${{ github.event.repository.name }}
        required: false
        type: string
      runs_on:
        default: ubuntu-latest
        required: false
        type: string
      setup_script:
        required: false
        type: string
      ignore_rosinstalls:
        default: ""
        required: false
        type: string
        description: "Specify relative paths from /path/to/workspace/src as in
          ./ros-package/.rosinstall, separated by commas."
      ros_distro:
        default: humble
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-build
  cancel-in-progress: true

jobs:
  changes:
    name: changes
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      cpp: ${{ steps.changes.outputs.cpp }}
      cpp_files: ${{ steps.changes.outputs.cpp_files }}
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: changed-file-filter
        id: changes
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        with:
          filters: |
            cpp:
              - added|modified: '**.h'
              - added|modified: '**.hpp'
              - added|modified: '**.hh'
              - added|modified: '**.hxx'
              - added|modified: '**.c'
              - added|modified: '**.cpp'
              - added|modified: '**.cc'
              - added|modified: '**.cxx'
          list-files: "shell"

  build:
    name: Build
    needs: changes
    runs-on: ${{ inputs.runs_on }}
    container:
      image: ros:${{ inputs.ros_distro }}
    outputs:
      upload_documents: ${{ steps.generate_documents.outputs.upload_documents }}
    steps:
      - name: Install necessary apt packages
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-client keyboard-configuration python3-pip wget curl
        timeout-minutes: 1
      - name: setup ssh key
        uses: shimataro/ssh-key-action@02d189fc92ea6279c0fea0e7a259da1b4f1d22a5 # v2.5.0
        with:
          key: ${{ secrets.ssh_key }}
          known_hosts: ${{ secrets.known_hosts }}
        timeout-minutes: 1
      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          path: ros/src/${{ github.event.repository.name }}
          submodules: recursive
        timeout-minutes: 1
      - name: Download repositories managed by ripvcs
        run: |
          wget https://github.com/ErickKramer/ripvcs/releases/download/v1.0.2/ripvcs_1.0.2_linux_amd64 \
          -O /usr/local/bin/rv
          chmod +x /usr/local/bin/rv
          files=`find . -type f -regextype posix-egrep -regex "\./.+\.(rosinstall|repos)" | sort`
          if [ "${{ inputs.ignore_rosinstalls }}" != "" ]; then
            ignores=$(echo "${{ inputs.ignore_rosinstalls }}" | tr ',' '\n' | awk '{printf "-x %s ", $0}')
          else
            ignores=""
          fi
          if [ `echo ${files} | wc -w` -ne 0 ]; then
            for f in ${files}
            do
              rv import -r -s -i ${f} ${ignores}
            done
          fi
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src
        timeout-minutes: 5
      - name: Install rosdep packages
        run: |
          echo -e "[install]\nbreak-system-packages = true" | tee /etc/pip.conf > /dev/null
          rosdep update
          rosdep install -iry --from-paths src --rosdistro ${ROS_DISTRO}
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 15
      - name: ccache
        uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
        with:
          max-size: 100M
        timeout-minutes: 1
      - name: Run setup script
        run: |
          if [ "${{ inputs.setup_script }}" != "" ]; then
            ./${{ inputs.setup_script }}
          fi
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src/${{ github.event.repository.name }}
        timeout-minutes: 30
      - name: Build ros2 packages
        run: |
          if [ `find src/${{ github.event.repository.name }} -name package.xml | wc -l` -eq 0 ]; then
            exit 0
          fi
          source /opt/ros/${ROS_DISTRO}/setup.bash
          export PATH="/usr/lib/ccache:$PATH"
          colcon build --packages-up-to ${{ inputs.package_name }} \
          --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 120
      - name: Run test
        run: |
          if [ `find src/${{ github.event.repository.name }} -name package.xml | wc -l` -eq 0 ]; then
            exit 0
          fi
          source install/setup.bash
          colcon test --packages-up-to ${{ inputs.package_name }}
        shell: bash
        working-directory: ${{ github.workspace }}/ros
        timeout-minutes: 30
      - name: Generate documents
        id: generate_documents
        uses: sbgisen/.github/composite/generate_sphinx_documents@main
        timeout-minutes: 10
      - name: Setup reviewdog
        uses: reviewdog/action-setup@8f2ec89e6b467ca9175527d2a1641bbd0c05783b # v1.0.3
      - name: Install uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
      - name: Download clang tidy config
        # yamllint disable-line rule:line-length
        run: wget https://raw.githubusercontent.com/sbgisen/.github/refs/heads/main/ros2/.clang-tidy -O .clang-tidy
        working-directory: ${{ github.workspace }}/ros
      - name: Download clangd config
        # yamllint disable-line rule:line-length
        run: wget https://raw.githubusercontent.com/sbgisen/.github/refs/heads/main/.clangd -O .clangd
        working-directory: ${{ github.workspace }}/ros/src/${{ github.event.repository.name }}
      - name: clang-tidy
        if: needs.changes.outputs.cpp == 'true'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clangd
          find ../../build -name "compile_commands.json" -exec cat {} + > ../../build/merged_compile_commands.json
          sed -i -e ':a;N;$!ba;s/\]\n*\[/,/g' ../../build/merged_compile_commands.json
          mv ../../build/merged_compile_commands.json ../../build/compile_commands.json
          uvx compdb -p ../../build list > ../../compile_commands.json
          output=$(uvx clangd-tidy -p ../../ -j 10 ${{ needs.changes.outputs.cpp_files }} || true)
          echo "$output" | reviewdog -name="clang-tidy" -reporter=github-pr-review \
          -efm='%f:%l:%c: %m' -filter-mode=file -fail-level=any
        shell: bash
        working-directory: ${{ github.workspace }}/ros/src/${{ github.event.repository.name }}

  deploy:
    needs: build
    timeout-minutes: 5
    if: >-
      needs.build.outputs.upload_documents == 1 &&
      github.event.repository.default_branch == github.ref_name &&
      github.event_name == 'push'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
